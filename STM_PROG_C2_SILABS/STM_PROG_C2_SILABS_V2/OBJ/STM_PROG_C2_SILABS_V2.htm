<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OBJ\STM_PROG_C2_SILABS_V2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OBJ\STM_PROG_C2_SILABS_V2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue Apr 13 03:30:43 2021
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MainLoopInit &rArr; SEND_INFO_CMD &rArr; Send_RS_String &rArr; Send_RS_Buf &rArr; Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[ac]">Send_RS_Hold</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">Send_RS_Buf</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[36]">C2_ProcInterface</a> from c2_interface_cfg.o(i.C2_ProcInterface) referenced from main_loop.o(i.MainLoopInit)
 <LI><a href="#[30]">CEC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from hdspi.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from hdspi.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from hdspi.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from hdspi.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[26]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[25]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[28]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[27]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2f]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[37]">Send_RS_Byte</a> from interface.o(i.Send_RS_Byte) referenced from main_loop.o(i.MainLoopInit)
 <LI><a href="#[37]">Send_RS_Byte</a> from interface.o(i.Send_RS_Byte) referenced from interface.o(i.Send_RS_DEC)
 <LI><a href="#[37]">Send_RS_Byte</a> from interface.o(i.Send_RS_Byte) referenced from interface.o(i.Send_RS_HEX)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from hardware.o(i.SystemInit) referenced from startup_stm32f10x_md_vl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from hardware.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[31]">TIM6_DAC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[32]">TIM7_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from interface.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2d]">USART3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md_vl.o(.text)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ca]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdGPIO_Setup
</UL>

<P><STRONG><a name="[cb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_wr_blk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_ofs_rd_blk
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_String
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAll_UpDate_IDDEV_REC
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
</UL>

<P><STRONG><a name="[3b]"></a>ADC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
</UL>

<P><STRONG><a name="[b6]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
</UL>

<P><STRONG><a name="[7c]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureVoltagePWRPROG
</UL>

<P><STRONG><a name="[7b]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureVoltagePWRPROG
</UL>

<P><STRONG><a name="[b4]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
</UL>

<P><STRONG><a name="[b1]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
</UL>

<P><STRONG><a name="[79]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureVoltagePWRPROG
</UL>

<P><STRONG><a name="[b3]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
</UL>

<P><STRONG><a name="[7a]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureVoltagePWRPROG
</UL>

<P><STRONG><a name="[b5]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
</UL>

<P><STRONG><a name="[4f]"></a>C2_ADDR_RD</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, c2_interface.o(i.C2_ADDR_RD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = C2_ADDR_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_WriteCommand
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_OutReady
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_InBusy
</UL>

<P><STRONG><a name="[3e]"></a>C2_ADDR_WR</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, c2_interface.o(i.C2_ADDR_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = C2_ADDR_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_InitX
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_GetDevRevID
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DBG_ReadRegBlock
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_SetAddrSize
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DBG_CMD_PAR
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockWriteA
</UL>

<P><STRONG><a name="[3d]"></a>C2_BlockRead</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, c2_interface.o(i.C2_BlockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = C2_BlockRead &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_OutReady
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_InBusy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReadBlock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllBlankCheckPage
</UL>

<P><STRONG><a name="[43]"></a>C2_BlockWrite</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, c2_interface.o(i.C2_BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = C2_BlockWrite &rArr; C2_BlockWriteA &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockWriteA
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllWriteBlock
</UL>

<P><STRONG><a name="[44]"></a>C2_BlockWriteA</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, c2_interface.o(i.C2_BlockWriteA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C2_BlockWriteA &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_OutReady
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_InBusy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockWrite
</UL>

<P><STRONG><a name="[42]"></a>C2_DATA_RD</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, c2_interface.o(i.C2_DATA_RD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = C2_DATA_RD &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Start
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ReadRegBlock
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_GetDevRevID
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DBG_ReadRegBlock
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_SetAddrSize
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockWriteA
</UL>

<P><STRONG><a name="[3f]"></a>C2_DATA_WR</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, c2_interface.o(i.C2_DATA_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Start
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_InitX
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_WriteCommand
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_SetAddrSize
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DBG_CMD_PAR
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockWriteA
</UL>

<P><STRONG><a name="[91]"></a>C2_DBG_CMD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, c2_interface.o(i.C2_DBG_CMD))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAll_DBG_CMD
</UL>

<P><STRONG><a name="[47]"></a>C2_DBG_CMD_PAR</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, c2_interface.o(i.C2_DBG_CMD_PAR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DBG_CMD_PAR
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DBG_CMD_PAR
</UL>

<P><STRONG><a name="[48]"></a>C2_DBG_ReadRegBlock</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, c2_interface.o(i.C2_DBG_ReadRegBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C2_DBG_ReadRegBlock &rArr; C2_DATA_RD &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReadBlock
</UL>

<P><STRONG><a name="[49]"></a>C2_GetDevRevID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, c2_interface.o(i.C2_GetDevRevID))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = C2_GetDevRevID &rArr; C2_DATA_RD &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReadID
</UL>

<P><STRONG><a name="[4a]"></a>C2_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, c2_interface.o(i.C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = C2_Init &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMCS
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
</UL>

<P><STRONG><a name="[4c]"></a>C2_InitX</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, c2_interface.o(i.C2_InitX))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = C2_InitX &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMCS
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllInit
</UL>

<P><STRONG><a name="[4d]"></a>C2_PageErase</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, c2_interface.o(i.C2_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = C2_PageErase &rArr; C2_WriteCommand &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_RD
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Start
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Check
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_WriteCommand
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_OutReady
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_InBusy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllErasePageWithCheck
</UL>

<P><STRONG><a name="[40]"></a>C2_Poll_InBusy</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, c2_interface.o(i.C2_Poll_InBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C2_Poll_InBusy &rArr; C2_ADDR_RD
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_RD
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Start
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_SetAddrSize
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockWriteA
</UL>

<P><STRONG><a name="[41]"></a>C2_Poll_OutReady</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, c2_interface.o(i.C2_Poll_OutReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C2_Poll_OutReady &rArr; C2_ADDR_RD
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_RD
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Start
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ReadRegBlock
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_SetAddrSize
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockWriteA
</UL>

<P><STRONG><a name="[36]"></a>C2_ProcInterface</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, c2_interface_cfg.o(i.C2_ProcInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C2_ProcInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_loop.o(i.MainLoopInit)
</UL>
<P><STRONG><a name="[50]"></a>C2_RES</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, c2_interface.o(i.C2_RES))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = C2_RES &rArr; DelayMCS &rArr; TimerCounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMCS
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReset
</UL>

<P><STRONG><a name="[51]"></a>C2_ReadRegBlock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, c2_interface.o(i.C2_ReadRegBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = C2_ReadRegBlock &rArr; C2_SetAddrSize &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_SetAddrSize
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_OutReady
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReadBlock
</UL>

<P><STRONG><a name="[52]"></a>C2_SetAddrSize</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, c2_interface.o(i.C2_SetAddrSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C2_SetAddrSize &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_WR
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_OutReady
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_InBusy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ReadRegBlock
</UL>

<P><STRONG><a name="[4e]"></a>C2_WriteCommand</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, c2_interface.o(i.C2_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C2_WriteCommand &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ADDR_RD
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Start
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Check
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
</UL>

<P><STRONG><a name="[53]"></a>CheckHardVersion</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hardware.o(i.CheckHardVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckHardVersion &rArr; DelayMS &rArr; Timer_1mcs_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_PWR
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hdspi.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; SPI1_DMA_DoInterruptRX &rArr; SPI1_DMA_DoInterruptAny &rArr; SPI1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptRX
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptRX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hdspi.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; SPI1_DMA_DoInterruptTX &rArr; SPI1_DMA_DoInterruptAny &rArr; SPI1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptTX
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptTX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hdspi.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; SPI2_DMA_DoInterruptRX &rArr; SPI2_DMA_DoInterruptAny &rArr; SPI2_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptRX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hdspi.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; SPI2_DMA_DoInterruptTX &rArr; SPI2_DMA_DoInterruptAny &rArr; SPI2_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptTX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>DelayMCS</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, hdtimers.o(i.DelayMCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DelayMCS &rArr; TimerCounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTimerCompareOverflowX
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCounterUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrStandartID
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_RES
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_InitX
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Hold
</UL>

<P><STRONG><a name="[54]"></a>DelayMS</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, hdtimers.o(i.DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelayMS &rArr; Timer_1mcs_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_1mcs_CounterUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrStandartID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHardVersion
</UL>

<P><STRONG><a name="[80]"></a>Echo_RS_Disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interface.o(i.Echo_RS_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[73]"></a>Echo_RS_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interface.o(i.Echo_RS_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
</UL>

<P><STRONG><a name="[5f]"></a>HD_ParsFind</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, hd_pars.o(i.HD_ParsFind))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HD_ParsFind &rArr; rb_fifo_ofs_rd &rArr; rb_fifo_ofs_rd_blk
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_size
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_rd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_ofs_rd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[81]"></a>HD_ParsGetVarCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hd_pars.o(i.HD_ParsGetVarCount))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[64]"></a>HD_ParsGetVarHEX</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, hd_pars.o(i.HD_ParsGetVarHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HD_ParsGetVarHEX &rArr; rb_fifo_ofs_rd &rArr; rb_fifo_ofs_rd_blk
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_ofs_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[65]"></a>HD_ParsGetVarHEXBIN</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, hd_pars.o(i.HD_ParsGetVarHEXBIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HD_ParsGetVarHEXBIN &rArr; rb_fifo_ofs_rd &rArr; rb_fifo_ofs_rd_blk
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_ofs_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[7f]"></a>HD_ParsGetVarSTR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hd_pars.o(i.HD_ParsGetVarSTR))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[66]"></a>HD_ParsGetVarSTRMM</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hd_pars.o(i.HD_ParsGetVarSTRMM), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_ofs_rd
</UL>

<P><STRONG><a name="[82]"></a>HD_ParsGetVarSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hd_pars.o(i.HD_ParsGetVarSize))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[6f]"></a>HD_ParsInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hd_pars.o(i.HD_ParsInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
</UL>

<P><STRONG><a name="[67]"></a>Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hardware.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Init &rArr; SPI1_GPIO_ON &rArr; SPI1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GPIO_ON
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_PWR
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectInitGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>MainLoopInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, main_loop.o(i.MainLoopInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MainLoopInit &rArr; SEND_INFO_CMD &rArr; Send_RS_String &rArr; Send_RS_Buf &rArr; Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_String
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_HEX
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Byte
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRPROG_VCC_LOW
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Echo_RS_Enable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>MainLoopPool</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main_loop.o(i.MainLoopPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MainLoopPool &rArr; PollProg &rArr; ProgAllErasePageWithCheckRepeat &rArr; ProgAllErasePageWithCheck &rArr; ProgAllBlankCheckPage &rArr; C2_BlockRead &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>MeasureVoltagePWRPROG</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hdadc.o(i.MeasureVoltagePWRPROG))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MeasureVoltagePWRPROG &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRPROG_VCC_MEASURE
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_Init</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, stm32f10x_nvic.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RS_Init
</UL>

<P><STRONG><a name="[84]"></a>PWRPROG_VCC_HIGH</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hardware.o(i.PWRPROG_VCC_HIGH))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[74]"></a>PWRPROG_VCC_LOW</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hardware.o(i.PWRPROG_VCC_LOW))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
</UL>

<P><STRONG><a name="[7d]"></a>PWRPROG_VCC_MEASURE</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hardware.o(i.PWRPROG_VCC_MEASURE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWRPROG_VCC_MEASURE &rArr; MeasureVoltagePWRPROG &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRPROG_VCC_OFF
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureVoltagePWRPROG
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[7e]"></a>PWRPROG_VCC_OFF</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hardware.o(i.PWRPROG_VCC_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRPROG_VCC_MEASURE
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[76]"></a>PollCFG</STRONG> (Thumb, 1328 bytes, Stack size 96 bytes, main_loop.o(i.PollCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PollCFG &rArr; Send_RS_String &rArr; Send_RS_Buf &rArr; Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_String
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_HEX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_DEC
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Byte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRPROG_VCC_OFF
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRPROG_VCC_MEASURE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRPROG_VCC_LOW
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRPROG_VCC_HIGH
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsGetVarSize
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsGetVarSTR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsGetVarHEXBIN
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsGetVarHEX
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsGetVarCount
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsFind
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Echo_RS_Enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Echo_RS_Disable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAll_DBG_CMD
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReset
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopPool
</UL>

<P><STRONG><a name="[77]"></a>PollProg</STRONG> (Thumb, 1708 bytes, Stack size 64 bytes, main_loop.o(i.PollProg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PollProg &rArr; ProgAllErasePageWithCheckRepeat &rArr; ProgAllErasePageWithCheck &rArr; ProgAllBlankCheckPage &rArr; C2_BlockRead &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_String
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_HEX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_DEC
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Byte
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrStandartID
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllWriteBlock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReadID
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReadBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllErasePageWithCheckRepeat
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllBlankCheckPage
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopPool
</UL>

<P><STRONG><a name="[88]"></a>PrStandartID</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, main_loop.o(i.PrStandartID))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PrStandartID &rArr; ProgAllReadID &rArr; C2_GetDevRevID &rArr; C2_DATA_RD &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMCS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReadID
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
</UL>

<P><STRONG><a name="[8b]"></a>ProgAllBlankCheckPage</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, progall.o(i.ProgAllBlankCheckPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ProgAllBlankCheckPage &rArr; C2_BlockRead &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockRead
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllErasePageWithCheck
</UL>

<P><STRONG><a name="[8f]"></a>ProgAllErasePageWithCheck</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, progall.o(i.ProgAllErasePageWithCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ProgAllErasePageWithCheck &rArr; ProgAllBlankCheckPage &rArr; C2_BlockRead &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllBlankCheckPage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllErasePageWithCheckRepeat
</UL>

<P><STRONG><a name="[8c]"></a>ProgAllErasePageWithCheckRepeat</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, progall.o(i.ProgAllErasePageWithCheckRepeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ProgAllErasePageWithCheckRepeat &rArr; ProgAllErasePageWithCheck &rArr; ProgAllBlankCheckPage &rArr; C2_BlockRead &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllErasePageWithCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
</UL>

<P><STRONG><a name="[89]"></a>ProgAllInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, progall.o(i.ProgAllInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ProgAllInit &rArr; C2_InitX &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_InitX
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrStandartID
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllWriteBlock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllErasePageWithCheckRepeat
</UL>

<P><STRONG><a name="[8d]"></a>ProgAllReadBlock</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, progall.o(i.ProgAllReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ProgAllReadBlock &rArr; C2_BlockRead &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_ReadRegBlock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DBG_ReadRegBlock
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockRead
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
</UL>

<P><STRONG><a name="[8a]"></a>ProgAllReadID</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, progall.o(i.ProgAllReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ProgAllReadID &rArr; C2_GetDevRevID &rArr; C2_DATA_RD &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_GetDevRevID
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAll_UpDate_IDDEV_REC
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrStandartID
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
</UL>

<P><STRONG><a name="[85]"></a>ProgAllReset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, progall.o(i.ProgAllReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ProgAllReset &rArr; C2_RES &rArr; DelayMCS &rArr; TimerCounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_RES
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrStandartID
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllErasePageWithCheckRepeat
</UL>

<P><STRONG><a name="[8e]"></a>ProgAllWriteBlock</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, progall.o(i.ProgAllWriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ProgAllWriteBlock &rArr; C2_BlockWrite &rArr; C2_BlockWriteA &rArr; C2_DATA_WR &rArr; WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_BlockWrite
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
</UL>

<P><STRONG><a name="[87]"></a>ProgAll_DBG_CMD</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, progall.o(i.ProgAll_DBG_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProgAll_DBG_CMD
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DBG_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[90]"></a>ProgAll_UpDate_IDDEV_REC</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, progall.o(i.ProgAll_UpDate_IDDEV_REC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ProgAll_UpDate_IDDEV_REC
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgAllReadID
</UL>

<P><STRONG><a name="[b0]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
</UL>

<P><STRONG><a name="[a0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GPIO
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdGPIO_Setup
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_ADC
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[3c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[68]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[70]"></a>SEND_INFO_CMD</STRONG> (Thumb, 198 bytes, Stack size 152 bytes, main_loop.o(i.SEND_INFO_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SEND_INFO_CMD &rArr; Send_RS_String &rArr; Send_RS_Buf &rArr; Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_IntToStr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_String
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_DEC
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Byte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_9
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_10
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
</UL>

<P><STRONG><a name="[98]"></a>SPI0_DMA_DoInterruptAny</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hdspi.o(i.SPI0_DMA_DoInterruptAny))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI0_DMA_DoInterruptAny &rArr; SPI0_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdSPI_SoftPool
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptTX
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptRX
</UL>

<P><STRONG><a name="[57]"></a>SPI0_DMA_DoInterruptRX</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, hdspi.o(i.SPI0_DMA_DoInterruptRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI0_DMA_DoInterruptRX &rArr; SPI0_DMA_DoInterruptAny &rArr; SPI0_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_SetUpM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptAny
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>SPI0_DMA_DoInterruptTX</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, hdspi.o(i.SPI0_DMA_DoInterruptTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI0_DMA_DoInterruptTX &rArr; SPI0_DMA_DoInterruptAny &rArr; SPI0_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_SetUpM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptAny
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>SPI0_DMA_SetUpM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, hdspi.o(i.SPI0_DMA_SetUpM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI0_DMA_SetUpM
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptTX
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptRX
</UL>

<P><STRONG><a name="[99]"></a>SPI0_GPIO</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hdspi.o(i.SPI0_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI0_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdGPIO_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptAny
</UL>

<P><STRONG><a name="[9d]"></a>SPI1_DMA_DoInterruptAny</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hdspi.o(i.SPI1_DMA_DoInterruptAny))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI1_DMA_DoInterruptAny &rArr; SPI1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdSPI_SoftPool
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptTX
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptRX
</UL>

<P><STRONG><a name="[55]"></a>SPI1_DMA_DoInterruptRX</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, hdspi.o(i.SPI1_DMA_DoInterruptRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI1_DMA_DoInterruptRX &rArr; SPI1_DMA_DoInterruptAny &rArr; SPI1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_SetUpM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptAny
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>SPI1_DMA_DoInterruptTX</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, hdspi.o(i.SPI1_DMA_DoInterruptTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI1_DMA_DoInterruptTX &rArr; SPI1_DMA_DoInterruptAny &rArr; SPI1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_SetUpM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptAny
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>SPI1_DMA_SetUpM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, hdspi.o(i.SPI1_DMA_SetUpM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI1_DMA_SetUpM
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptTX
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptRX
</UL>

<P><STRONG><a name="[9e]"></a>SPI1_GPIO</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hdspi.o(i.SPI1_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdGPIO_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GPIO_ON
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptAny
</UL>

<P><STRONG><a name="[6a]"></a>SPI1_GPIO_ON</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hdspi.o(i.SPI1_GPIO_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI1_GPIO_ON &rArr; SPI1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[69]"></a>SPI1_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hdspi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI1_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[a3]"></a>SPI2_DMA_DoInterruptAny</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hdspi.o(i.SPI2_DMA_DoInterruptAny))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI2_DMA_DoInterruptAny &rArr; SPI2_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdSPI_SoftPool
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptTX
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptRX
</UL>

<P><STRONG><a name="[5a]"></a>SPI2_DMA_DoInterruptRX</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, hdspi.o(i.SPI2_DMA_DoInterruptRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI2_DMA_DoInterruptRX &rArr; SPI2_DMA_DoInterruptAny &rArr; SPI2_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_SetUpM
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptAny
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>SPI2_DMA_DoInterruptTX</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, hdspi.o(i.SPI2_DMA_DoInterruptTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI2_DMA_DoInterruptTX &rArr; SPI2_DMA_DoInterruptAny &rArr; SPI2_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_SetUpM
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptAny
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>SPI2_DMA_SetUpM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, hdspi.o(i.SPI2_DMA_SetUpM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI2_DMA_SetUpM
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptTX
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptRX
</UL>

<P><STRONG><a name="[a4]"></a>SPI2_GPIO</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, hdspi.o(i.SPI2_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdGPIO_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptAny
</UL>

<P><STRONG><a name="[a2]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[a7]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
</UL>

<P><STRONG><a name="[a6]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
</UL>

<P><STRONG><a name="[a1]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[86]"></a>SPI_WriteReadByte</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hdspi.o(i.SPI_WriteReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_WriteReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[6b]"></a>SelectInitGPIO</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, hardware.o(i.SelectInitGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SelectInitGPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdGPIO_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[a8]"></a>Send_RS_Buf</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, interface.o(i.Send_RS_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Send_RS_Buf &rArr; Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_size
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_wr_blk
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GPIO
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Hold
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_String
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Hold
</UL>

<P><STRONG><a name="[37]"></a>Send_RS_Byte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interface.o(i.Send_RS_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Send_RS_Byte &rArr; Send_RS_Buf &rArr; Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main_loop.o(i.MainLoopInit)
<LI> interface.o(i.Send_RS_HEX)
<LI> interface.o(i.Send_RS_DEC)
</UL>
<P><STRONG><a name="[83]"></a>Send_RS_DEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interface.o(i.Send_RS_DEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send_RS_DEC &rArr; rb_IntToProc
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_IntToProc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
</UL>

<P><STRONG><a name="[72]"></a>Send_RS_HEX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interface.o(i.Send_RS_HEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send_RS_HEX &rArr; rb_IntToProc
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_IntToProc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
</UL>

<P><STRONG><a name="[ac]"></a>Send_RS_Hold</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, interface.o(i.Send_RS_Hold))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_size
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMCS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GPIO
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>

<P><STRONG><a name="[71]"></a>Send_RS_String</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, interface.o(i.Send_RS_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Send_RS_String &rArr; Send_RS_Buf &rArr; Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollProg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollCFG
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
</UL>

<P><STRONG><a name="[6c]"></a>Setup_ADC</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, hdadc.o(i.Setup_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Setup_ADC &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[6d]"></a>Setup_PWR</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hardware.o(i.Setup_PWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Setup_PWR &rArr; CheckHardVersion &rArr; DelayMS &rArr; Timer_1mcs_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckHardVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hardware.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; stm32_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardware.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>TimerCounterUpdate</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, hdtimers.o(i.TimerCounterUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerCounterUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMCS
</UL>

<P><STRONG><a name="[5e]"></a>Timer_1mcs_CounterUpdate</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, hdtimers.o(i.Timer_1mcs_CounterUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timer_1mcs_CounterUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>

<P><STRONG><a name="[c0]"></a>Timer_1ms_CounterUpdate</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, hdtimers.o(i.Timer_1ms_CounterUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timer_1ms_CounterUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Start
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Check
</UL>

<P><STRONG><a name="[ad]"></a>USART1_GPIO</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, interface.o(i.USART1_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdGPIO_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RS_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Hold
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>

<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, interface.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; rb_fifo_wr_blk
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_size
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_rd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_wr_blk
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RS_Init
</UL>

<P><STRONG><a name="[ae]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Hold
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>

<P><STRONG><a name="[b9]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RS_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>

<P><STRONG><a name="[bc]"></a>USART_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RS_Init
</UL>

<P><STRONG><a name="[ba]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>Uart_RS_Init</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, interface.o(i.Uart_RS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Uart_RS_Init &rArr; USART1_GPIO &rArr; hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_size
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_flush
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>WaitMS_Check</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, hdtimers.o(i.WaitMS_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitMS_Check &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_1ms_CounterUpdate
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTimerCompareOverflowX
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_WriteCommand
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_OutReady
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_InBusy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>

<P><STRONG><a name="[45]"></a>WaitMS_Start</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, hdtimers.o(i.WaitMS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitMS_Start &rArr; Timer_1ms_CounterUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_1ms_CounterUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_PageErase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_WriteCommand
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_OutReady
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_Poll_InBusy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_WR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2_DATA_RD
</UL>

<P><STRONG><a name="[94]"></a>__ARM_common_memcpy4_10</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main_loop.o(i.__ARM_common_memcpy4_10))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
</UL>

<P><STRONG><a name="[97]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main_loop.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
</UL>

<P><STRONG><a name="[95]"></a>__ARM_common_memcpy4_9</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main_loop.o(i.__ARM_common_memcpy4_9))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
</UL>

<P><STRONG><a name="[d0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9c]"></a>hdGPIO_Setup</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, hdports.o(i.hdGPIO_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hdGPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_GPIO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectInitGPIO
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GPIO
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GPIO
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_GPIO
</UL>

<P><STRONG><a name="[9a]"></a>hdSPI_SoftPool</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, hdspi.o(i.hdSPI_SoftPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hdSPI_SoftPool
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_DMA_DoInterruptAny
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DMA_DoInterruptAny
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DMA_DoInterruptAny
</UL>

<P><STRONG><a name="[5d]"></a>isTimerCompareOverflowX</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hdtimers.o(i.isTimerCompareOverflowX))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMCS
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMS_Check
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; MainLoopInit &rArr; SEND_INFO_CMD &rArr; Send_RS_String &rArr; Send_RS_Buf &rArr; Send_RS_Hold &rArr;  Send_RS_Buf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RS_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopPool
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoopInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[af]"></a>rb_IntToProc</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, rb_util.o(i.rb_IntToProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rb_IntToProc
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_IntToStr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_HEX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_DEC
</UL>

<P><STRONG><a name="[96]"></a>rb_IntToStr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rb_util.o(i.rb_IntToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rb_IntToStr &rArr; rb_IntToProc
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_IntToProc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEND_INFO_CMD
</UL>

<P><STRONG><a name="[60]"></a>rb_fifo_flush</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rb_fifo.o(i.rb_fifo_flush))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsFind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RS_Init
</UL>

<P><STRONG><a name="[a9]"></a>rb_fifo_free</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rb_fifo.o(i.rb_fifo_free))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>

<P><STRONG><a name="[62]"></a>rb_fifo_ofs_rd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rb_fifo.o(i.rb_fifo_ofs_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rb_fifo_ofs_rd &rArr; rb_fifo_ofs_rd_blk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_ofs_rd_blk
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsGetVarSTRMM
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsGetVarHEXBIN
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsGetVarHEX
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsFind
</UL>

<P><STRONG><a name="[c2]"></a>rb_fifo_ofs_rd_blk</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, rb_fifo.o(i.rb_fifo_ofs_rd_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rb_fifo_ofs_rd_blk
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rb_fifo_ofs_rd
</UL>

<P><STRONG><a name="[63]"></a>rb_fifo_rd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rb_fifo.o(i.rb_fifo_rd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsFind
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>rb_fifo_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rb_fifo.o(i.rb_fifo_size))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HD_ParsFind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RS_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Hold
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>

<P><STRONG><a name="[aa]"></a>rb_fifo_wr_blk</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, rb_fifo.o(i.rb_fifo_wr_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rb_fifo_wr_blk
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RS_Buf
</UL>

<P><STRONG><a name="[b7]"></a>stm32_Init</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, stm32_init.o(i.stm32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stm32_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_TimerGetReload
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c4]"></a>stm32_TimerGetReload</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32_init.o(i.stm32_TimerGetReload))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
